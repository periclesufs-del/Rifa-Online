import streamlit as st
import pandas as pd
import os
import math

st.set_page_config(page_title="Rifa Solid√°ria", layout="centered")

st.title("Rifa Solid√°ria")
st.write("""
Ol√°, pessoal! Familiares e amigos est√£o unidos em uma corrente de solidariedade pela sa√∫de da nossa querida amiga Enfermeira Lane. Ela precisa com urg√™ncia realizar uma cirurgia de corre√ß√£o de f√≠stula liqu√≥rica na coluna tor√°cica, um procedimento essencial para sua recupera√ß√£o e qualidade de vida.
O custo total √© de R$ 106.000,00, valor que inclui honor√°rios m√©dicos (cirurgi√£o, anestesista, neuroestimula√ß√£o e demais custos hospitalares).
Para ajudar a tornar esse tratamento poss√≠vel, estamos organizando uma rifa solid√°ria, cuja renda contribuir√° de forma significativa para alcan√ßar essa meta. Sua participa√ß√£o faz toda a diferen√ßa! Cada gesto de apoio √© um passo importante rumo √† sa√∫de e ao bem-estar da nossa amiga Lane.
üíö
""")

# Exibi√ß√£o dos pr√™mios
st.markdown("""
### Pr√™mios:
- 1¬∫ Pr√™mio: Smartphone Samsung A54
- 2¬∫ Pr√™mio: Voucher de R$ 500,00 em loja parceira
- 3¬∫ Pr√™mio: Caixa de som port√°til JBL
""")

arquivo_csv = "rifa_participantes.csv"

# Carrega dados existentes e garante colunas
if os.path.exists(arquivo_csv):
    df = pd.read_csv(arquivo_csv)
else:
    df = pd.DataFrame(columns=["Nome", "Contato", "Numero", "Status", "Comprovante"])

for col in ["Status", "Comprovante"]:
    if col not in df.columns:
        df[col] = "" if col == "Comprovante" else "pendente"

num_inicial = 1
num_final = 5000
faixa = 500  # n√∫meros por p√°gina
total_paginas = math.ceil((num_final - num_inicial + 1) / faixa)

ocupados = df[df["Status"] != "liberado"]["Numero"].astype(int).tolist() if not df.empty else []

# Escolha da p√°gina (faixa)
pagina = st.number_input(
    "Selecione a faixa de n√∫meros",
    min_value=1, max_value=total_paginas, step=1,
    value=1
)

inicio_faixa = num_inicial + (pagina - 1) * faixa
fim_faixa = min(inicio_faixa + faixa - 1, num_final)
numeros_faixa = list(range(inicio_faixa, fim_faixa + 1))
numeros_disponiveis = [n for n in numeros_faixa if n not in ocupados]

st.subheader(f"N√∫meros dispon√≠veis ({inicio_faixa} a {fim_faixa})")
st.write(f"Voc√™ pode selecionar v√°rios n√∫meros.")

# Sele√ß√£o m√∫ltipla dos n√∫meros
selecionados = st.multiselect(
    "Escolha os n√∫meros desejados nesta faixa:",
    options=numeros_faixa,
    default=[],
    disabled_options=[str(n) for n in ocupados if inicio_faixa <= n <= fim_faixa]
)

nome = st.text_input("Seu nome completo")
contato = st.text_input("Telefone para contato (WhatsApp)")
comprovante = st.file_uploader(
    "Envie seu comprovante de pagamento (opcional, PDF ou imagem)", 
    type=["pdf", "jpg", "jpeg", "png"]
)

if st.button("Reservar n√∫mero(s)"):
    if nome.strip() == "" or contato.strip() == "":
        st.warning("Preencha todos os campos!")
    elif not selecionados:
        st.warning("Selecione pelo menos um n√∫mero!")
    elif any(n in ocupados for n in selecionados):
        st.error("Um ou mais n√∫meros selecionados j√° foram reservados.")
    else:
        comp_path = ""
        if comprovante:
            os.makedirs("comprovantes", exist_ok=True)
            ext = os.path.splitext(comprovante.name)[1]
            comp_filename = f"comprovantes/{'_'.join(map(str,selecionados))}_{nome.strip().replace(' ', '_')}{ext}"
            with open(comp_filename, "wb") as f:
                f.write(comprovante.getbuffer())
            comp_path = comp_filename
        novas_linhas = pd.DataFrame(
            [[nome.strip(), contato.strip(), n, "pendente", comp_path] for n in selecionados],
            columns=["Nome", "Contato", "Numero", "Status", "Comprovante"]
        )
        df = pd.concat([df, novas_linhas], ignore_index=True)
        df.to_csv(arquivo_csv, index=False)
        st.success(f"N√∫meros {', '.join(map(str, selecionados))} reservados para {nome}! Status: pendente.")

# √Årea de gest√£o administrativa por senha
if st.checkbox("Acesso administrativo (organizador)"):
    admin_senha = st.text_input("Digite a senha de administrador:", type="password")
    if admin_senha == "142758Ufal!@#":
        st.subheader("Gest√£o de pagamentos e reservas")
        st.dataframe(df)
        numero_gerenciar = st.number_input(
            "Informe o n√∫mero para liberar/cancelar ou marcar como pago",
            min_value=num_inicial, max_value=num_final, step=1
        )
        acao = st.selectbox("A√ß√£o", ["Liberar n√∫mero (cancelar reserva)", "Marcar como pago"])
        if st.button("Aplicar a√ß√£o"):
            idx = df[df["Numero"].astype(int) == int(numero_gerenciar)].index
            if len(idx) == 0:
                st.warning("N√∫mero n√£o encontrado ou sem reserva ativa.")
            else:
                if acao == "Liberar n√∫mero (cancelar reserva)":
                    df.loc[idx, "Status"] = "liberado"
                    st.info(f"N√∫mero {numero_gerenciar} foi liberado e est√° dispon√≠vel novamente.")
                elif acao == "Marcar como pago":
                    df.loc[idx, "Status"] = "pago"
                    st.success(f"N√∫mero {numero_gerenciar} foi marcado como pago.")
                df.to_csv(arquivo_csv, index=False)
        if st.button("Exportar lista (CSV)", key="export_admin"):
            df.to_csv(arquivo_csv, index=False)
            st.success("Arquivo atualizado/exportado com sucesso.")
    elif admin_senha != "":
        st.error("Senha incorreta.")

st.info("Ao reservar seu n√∫mero, confirme pagamento pelo n√∫mero (97) 984033561. Envie seu comprovante para facilitar a confirma√ß√£o. Ap√≥s verifica√ß√£o, seu n√∫mero ser√° validado!")
